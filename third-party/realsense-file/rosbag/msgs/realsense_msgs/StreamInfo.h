// Generated by gencpp from file realsense_msgs/StreamInfo.msg
// DO NOT EDIT!


#ifndef REALSENSE_MSGS_MESSAGE_STREAMINFO_H
#define REALSENSE_MSGS_MESSAGE_STREAMINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace realsense_msgs
{
template <class ContainerAllocator>
struct StreamInfo_
{
  typedef StreamInfo_<ContainerAllocator> Type;

  StreamInfo_()
    : unique_id()
    , fps(0)
    , encoding()  {
    }
  StreamInfo_(const ContainerAllocator& _alloc)
    : unique_id(_alloc)
    , fps(0)
    , encoding(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unique_id_type;
  _unique_id_type unique_id;

   typedef uint32_t _fps_type;
  _fps_type fps;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _encoding_type;
  _encoding_type encoding;




  typedef std::shared_ptr< ::realsense_msgs::StreamInfo_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::realsense_msgs::StreamInfo_<ContainerAllocator> const> ConstPtr;

}; // struct StreamInfo_

typedef ::realsense_msgs::StreamInfo_<std::allocator<void> > StreamInfo;

typedef std::shared_ptr< ::realsense_msgs::StreamInfo > StreamInfoPtr;
typedef std::shared_ptr< ::realsense_msgs::StreamInfo const> StreamInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_msgs::StreamInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_msgs::StreamInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace realsense_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'realsense_msgs': ['/home/zivs/dev/realsense_msg_generator/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::realsense_msgs::StreamInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_msgs::StreamInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_msgs::StreamInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_msgs::StreamInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_msgs::StreamInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_msgs::StreamInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_msgs::StreamInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66ffb3d2e1104a326b299d7cbcc91cd5";
  }

  static const char* value(const ::realsense_msgs::StreamInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66ffb3d2e1104a32ULL;
  static const uint64_t static_value2 = 0x6b299d7cbcc91cd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_msgs::StreamInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_msgs/StreamInfo";
  }

  static const char* value(const ::realsense_msgs::StreamInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_msgs::StreamInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message defines meta information for a stream\n\
\n\
string unique_id  # A unique identifier\n\
uint32 fps        # The nominal streaming rate, defined in Hz\n\
string encoding   # The format\n\
";
  }

  static const char* value(const ::realsense_msgs::StreamInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_msgs::StreamInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unique_id);
      stream.next(m.fps);
      stream.next(m.encoding);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StreamInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_msgs::StreamInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_msgs::StreamInfo_<ContainerAllocator>& v)
  {
    s << indent << "unique_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unique_id);
    s << indent << "fps: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fps);
    s << indent << "encoding: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.encoding);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_MSGS_MESSAGE_STREAMINFO_H
